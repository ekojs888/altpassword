#!/bin/bash
# altpasswd v3 — 100% Bash version (no Python)
# Hash: yescrypt via mkpasswd (whois)
# File data: /etc/altpasswd
# Format: username:<yescrypt-hash>
# Log file: /var/log/altpasswd.log

ALT_FILE="/etc/altpasswd"
TMP_FILE="/tmp/altpasswd.$$"
LOG_FILE="/var/log/altpasswd.log"

usage() {
    echo "Usage:"
    echo "  altpasswd add <user>"
    echo "  altpasswd update <user>"
    echo "  altpasswd delete <user>"
    echo "  altpasswd list"
    echo "  altpasswd verify <user> <password>"
    exit 1
}

ensure_root() {
    [[ $EUID -eq 0 ]] || { echo "❌ Must be run as root."; exit 1; }
}

log_event() {
    local msg="$1"
    local ts
    ts=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$ts] $msg" >> "$LOG_FILE"
    chmod 600 "$LOG_FILE" 2>/dev/null
}

hash_password() {
    local password="$1"
    mkpasswd -m yescrypt "$password"
}

add_or_update() {
    ensure_root
    local user pass hash
    user="$1"
    pass="$2"
    [[ -z "$user" ]] && { echo "User cannot be empty."; return 1; }
    [[ -z "$pass" ]] && { echo "Password cannot be empty."; return 1; }

    hash=$(hash_password "$pass")
  
    touch "$ALT_FILE"
    chmod 600 "$ALT_FILE"

    if grep -q "^${user}:" "$ALT_FILE" 2>/dev/null; then
        sed -i "s|^${user}:.*|${user}:${hash}|" "$ALT_FILE"
        echo "🔄 Updated alt password for $user"
        log_event "UPDATED alt password for user $user"
    else
        echo "${user}:${hash}" >> "$ALT_FILE"
        echo "✅ Added alt password for $user"
        log_event "ADDED alt password for user $user"
    fi
}

delete_user() {
    ensure_root
    local user="$1"
    if grep -q "^${user}:" "$ALT_FILE" 2>/dev/null; then
        grep -v "^${user}:" "$ALT_FILE" > "$TMP_FILE" && mv "$TMP_FILE" "$ALT_FILE"
        echo "❌ Deleted alt password for $user"
        log_event "DELETED alt password for user $user"
    else
        echo "⚠️ User not found."
    fi
}

list_users() {
    [[ -f "$ALT_FILE" ]] || { echo "No alt passwords set."; exit 0; }
    cut -d: -f1 "$ALT_FILE"
}

verify_user() {
    local user="$1"
    local pass="$2"
    local line stored_hash newhash
    log_event "CEK : $user, $pass, $1 ,$2"
 
    # pastikan file database ada
    if [[ ! -f "$ALT_FILE" ]]; then
        log_event "VERIFY FAIL: no altpasswd file"
        exit 1
    fi

    if [[ -z "$user" ]]; then
        log_event "VERIFY FAIL: missing user argument"
        exit 1
    fi

    # ambil hash user dari database
    line=$(grep -m1 "^${user}:" "$ALT_FILE" 2>/dev/null || true)
    if [[ -z "$line" ]]; then
        log_event "VERIFY FAIL: user $user not found"
        exit 1
    fi
    stored_hash="${line#*:}"

    # ambil password dari argumen atau stdin (PAM kirim via stdin)
    if [[ -z "$pass" ]]; then
        IFS= read -r pass || {
            log_event "VERIFY FAIL: no password on stdin for user $user"
            exit 1
        }
    fi

    # verifikasi dengan mkpasswd yescrypt
    newhash=$(mkpasswd -m yescrypt "$pass" "$stored_hash" 2>/dev/null) || {
        log_event "VERIFY FAIL: mkpasswd error for user $user"
        exit 1
    }

    if [[ "$newhash" == "$stored_hash" ]]; then
        log_event "VERIFY OK: user $user"
        exit 0
    else
        log_event "VERIFY FAIL: wrong password for user $user"
        exit 1
    fi
}



cmd="$1"; user="$2"; pass="$3"

case "$cmd" in
    add|update)
        [[ -n "$user" ]] || usage
        [[ -n "$pass" ]] || usage
        add_or_update "$user" "$pass"
        ;;
    delete)
        [[ -n "$user" ]] || usage
        delete_user "$user"
        ;;
    list)
        list_users
        ;;
    verify)
        verify_user "$user" "$pass"
        ;;
    *)
        usage
        ;;
esac

